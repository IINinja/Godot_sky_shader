[gd_scene load_steps=13 format=2]

[ext_resource path="res://default_env.tres" type="Environment" id=1]
[ext_resource path="res://shaders/Sky_with_simple_colors.shader" type="Shader" id=2]
[ext_resource path="res://shaders/Clouds.shader" type="Shader" id=3]
[ext_resource path="res://shaders/noise.png" type="Texture" id=4]
[ext_resource path="res://addons/SIsilicon.vfx.godrays/GodRays.gd" type="Script" id=5]
[ext_resource path="res://shaders/thunder.ogg" type="AudioStream" id=6]

[sub_resource type="GDScript" id=1]
script/source = "tool
extends Spatial

onready var env = $Env.environment
onready var sun = $Sun_Moon
onready var sky_view = $sky_viewport
onready var clouds_view = $clouds_viewport
onready var sky_tex = $sky_viewport/sky_texture
onready var clouds_tex = $clouds_viewport/clouds_texture
export (int) var clouds_resolution: int=1024 setget set_clouds_resolution
export (int) var sky_resolution: int=2048 setget set_sky_resolution
var god_rays
var iTime: float=0.0
export (Color, RGBA) var sun_light :Color = Color(1.0,1.0,1.0,1.0) setget set_sun_light
export (Color, RGBA) var moon_light :Color = Color(0.6,0.6,0.8,1.0)
export (Color, RGBA) var sunset_light :Color = Color(1.0,0.7,0.55,1.0)
export (Color, RGBA) var night_color_sky :Color = Color(0.0,0.0,0.0,1.0) setget set_night_color_sky
export (Color, RGBA) var sunset_color_horizon :Color = Color(1.0,0.33,0.12,1.0) setget set_sunset_color_horizon
export (Color, RGBA) var day_color_sky :Color = Color(0.07,0.18,0.50,1.0) setget set_day_color_sky
export (Color, RGBA) var day_color_horizon :Color = Color(0.24,0.53,0.72,1.0)setget set_day_color_horizon
export (Color, RGBA) var moon_color :Color = Color(0.92,0.55,0.11,1.0)setget set_moon_color
export (Color, RGBA) var clouds_color :Color = Color(1.0,1.0,1.0,1.0)setget set_clouds_color
var sun_pos: Vector3
var moon_pos: Vector3
export (float, 0.0,1.0,0.0001) var moon_radius: float = 0.2 setget set_moon_radius#from 0 to 1
export (float, 0.0,1.0,0.0001) var moon_phase: float =0.0 setget set_moon_phase#from 0 to 1
var lighting_pos: Vector3=Vector3(0.0,1.0,1.0)
var lighting_strike: bool = false setget set_lighting_strike
export var wind_dir: Vector2=Vector2(1.0,0.0) setget set_wind_dir
export (float, 0.0,1.0,0.0001) var wind_strength: float = 0.1 setget set_wind_strength#from 0 to 1
export (float, 0.0,1.0,0.0001) var clouds_coverage: float = 0.5 setget set_clouds_coverage#from 0 to 1
export (float, 1.0,10.0,0.0001) var clouds_size: float = 1.0 setget set_clouds_size#from 1 to 10
export (float, 0.0,1.0,0.0001) var clouds_softness: float = 1.0 setget set_clouds_softness#from 0 to 1
export (float, 0.0,1.0,0.0001) var clouds_dens: float = 0.07 setget set_clouds_dens#from 0 to 1
export (float, 0.0,1.0,0.0001) var clouds_height: float = 0.35 setget set_clouds_height#from 0 to 1
export (float, 0.0,1.0,0.0001) var quality: float = 0.25 setget set_quality#from 0 to 1

export (int, 0, 23) var hours: int setget set_hours
export (int, 0, 59) var minutes: int setget set_minutes
export (int, 0, 59) var seconds: int setget set_seconds
export (float, 0.0,1.0,0.0001) var time_of_day: float setget set_time_of_day#from 0 to 1
var one_second: float = 1.0/(24.0*60.0*60)#What part of a second takes in a day in the range from 0 to 1
export var night_level_light: float=0.05 setget set_night_level_light

func set_call_deff_shader_params(node, params, value):
	node.set(params,value)

func set_clouds_resolution(value):
	clouds_resolution = value
	if is_inside_tree():
		clouds_view.size = Vector2(clouds_resolution,clouds_resolution)
		clouds_tex.texture.set_size_override(Vector2(clouds_resolution,clouds_resolution))

func set_sky_resolution(value):
	sky_resolution = value
	if is_inside_tree():
		sky_view.size = Vector2(sky_resolution,sky_resolution)
		sky_tex.texture.set_size_override(Vector2(sky_resolution,sky_resolution))
	
func _ready():
	god_rays = get_node_or_null(\"GodRays\")
	_set_god_rays(true)
	set_lighting_strike(false)
	call_deferred(\"_set_attenuation\",3.0)
	call_deferred(\"_set_exposure\",1.0)
	call_deferred(\"_set_light_size\",0.3)
	env.background_sky.set_panorama(sky_view.get_texture())
	call_deferred(\"set_sun_light\",sun_light)
	call_deferred(\"set_night_color_sky\",night_color_sky)
	call_deferred(\"set_sunset_color_horizon\",sunset_color_horizon)
	call_deferred(\"set_day_color_sky\",day_color_sky)
	call_deferred(\"set_day_color_horizon\",day_color_horizon)
	call_deferred(\"set_moon_color\",moon_color)
	call_deferred(\"set_clouds_color\",clouds_color)
	
	call_deferred(\"set_moon_phase\",moon_phase)
	call_deferred(\"set_moon_radius\",moon_radius)
	call_deferred(\"set_wind_strength\",wind_strength)
	call_deferred(\"set_wind_strength\",wind_strength)
	call_deferred(\"set_quality\",quality)
	call_deferred(\"set_clouds_height\",clouds_height)
	call_deferred(\"set_clouds_coverage\",clouds_coverage)

func set_night_level_light(value):
	night_level_light = clamp(value,0.0,1.0)
	set_time()

func set_hours(value):
	hours = clamp(value,0,23)
	set_time_of_day((float(hours*3600+minutes*60+seconds))*one_second)
	
func set_minutes(value):
	minutes = clamp(value,0,59)
	set_time_of_day((float(hours*3600+minutes*60+seconds))*one_second)
	
func set_seconds(value):
	seconds = clamp(value,0,59)
	set_time_of_day((float(hours*3600+minutes*60+seconds))*one_second)
		
func set_time_of_day(value):
	time_of_day = clamp(value,0.0,1.0)
	var time = time_of_day/one_second
	hours = int(clamp(time/3600.0,0.0,23.0))
	time -= hours*3600
	minutes = int(clamp(time/60,0.0,59.0))
	time -= minutes*60
	seconds = int(clamp(time,0.0,59.0))
	#print (hours,\":\",minutes,\":\",seconds,\":::\",time_of_day)
	set_time()

func set_time():
	if !is_inside_tree():
		return
	var light_color :Color = Color(1.0,1.0,1.0,1.0)
	var light_energy: float = night_level_light
	var day_time: Vector2 = Vector2()
	day_time.x = floor(time_of_day/0.0835) #the period of day (2 hours)
	day_time.y = clamp(fmod(time_of_day,0.0835)*12.0,0.01,0.99); #Time in a period of day in the range from 0 to 1.
	var phi: float =0.0;
	phi = ((day_time.x-1.0)*30.0+day_time.y *30.0)*0.0174533 #30 degrees in period of day and transform to radians.
	sun_pos = Vector3(0.0,-1.0,0.0).normalized().rotated(Vector3(0.0,0.0,1.0).normalized(),phi) #here you can change the start position of the Sun and axis of rotation
	moon_pos = Vector3(0.0,1.0,0.0).normalized().rotated(Vector3(1.0,0.0,1.0).normalized(),phi) #Same for Moon
	call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/SUN_POS\",sun_pos)
	call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/MOON_POS\",moon_pos)
	call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/MOON_POS\",moon_pos)
	
	sun_pos.x *= -1 # The x-axis is inverted on the stage for unknown reasons, so we have fixed this for light source
	moon_pos.x *= -1
	var day_period: float =0.0
	var position = Vector3()
	match day_time.x:
		5.0,6.0,7.0,8.0:
			day_period = 3.0 #day. this is value for shader.
			position = sun_pos
			light_energy =1.0 #level of illumination
			light_color = sun_light #color light from sun
		0.0,1.0,2.0,11.0:
			day_period = 0.0 #night. 
			position = moon_pos
			light_energy = night_level_light
			light_color = moon_light
		3.0:
			day_period = 1.0 #from night to dawn
			position = sun_pos
			light_energy=clamp(day_time.y/2,night_level_light,0.5)
			light_color=lerp(moon_light,sunset_light,light_energy*2.0)
		4.0:
			day_period = 2.0 #from dawn to day
			position = sun_pos
			light_energy=clamp(0.5+day_time.y/2,0.5,1.0)
			light_color=lerp(sunset_light,sun_light,light_energy*2.0 -1.0)
		9.0:
			day_period = 4.0 #from day to sunset
			position = sun_pos
			light_energy=clamp(1.0-day_time.y/2,0.5,1.0)
			light_color=lerp(sunset_light,sun_light,light_energy*2.0 -1.0)
		10.0:
			day_period = 5.0 #from sunset to night
			position = sun_pos
			light_energy=clamp(0.5-day_time.y/2,night_level_light,0.5)
			light_color=lerp(moon_light, sunset_light,light_energy*2.0)
	day_time.x = day_period;
	call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/DAY_TIME\",day_time)
	sun.look_at_from_position(position,Vector3.ZERO,Vector3.UP); # move sun to position and look at center scene from position
	light_energy = light_energy *(1-clouds_coverage*0.5)
	sun.light_energy = light_energy
	sun.light_color = light_color
	env.ambient_light_energy = light_energy
	env.ambient_light_color = light_color
	env.adjustment_saturation = 1-clouds_coverage*0.5

func set_clouds_height(value):
	clouds_height = clamp(value,0.0,1.0)
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/HEIGHT\",clouds_height)

func set_clouds_coverage(value):
	clouds_coverage = clamp(value,0.0,1.0)
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/COVERAGE\",1.0-clouds_coverage)
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/ABSORPTION\",clouds_coverage+0.75)
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/THICKNESS\",clouds_coverage*10+10)
		call_deferred(\"set_time\")

func set_clouds_size(value):
	clouds_size = clamp(value,0.0,10.0)
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/SIZE\",clouds_size)

func set_clouds_softness(value):
	clouds_softness = clamp(value,0.0,1.0)
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/SOFTNESS\",clouds_softness)

func set_clouds_dens(value: float):
	clouds_dens = clamp(value,0.0,1.0)
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/DENS\",clouds_dens)


func set_quality(value):
	quality = value
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/STEPS\",clamp (int(quality*100),2,100))

func set_wind_dir(value):
	wind_dir = value.normalized() #normalize wind vector
	set_wind_strength(wind_strength)

func set_wind_strength(value):
	wind_strength = value
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/WIND\",Vector3(-wind_dir.x,0.0,wind_dir.y)*wind_strength) #The x-axis is inverted on the stage for unknown reasons, so we have fixed this for light source
	
func set_moon_radius(value):
	moon_radius = clamp(value,0.0,1.0)
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/moon_radius\",value)
	
func set_moon_phase(value):
	moon_phase = clamp(value,0.0,1.0)
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/MOON_PHASE\",moon_phase*0.4-0.2) # convert to diapazon -0.2...+0.2

func set_sun_light(value):
	sun_light = value
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/sun_color\",sun_light)

func set_night_color_sky(value):
	night_color_sky = value
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/night_color_sky\",night_color_sky)

func set_sunset_color_horizon(value):
	sunset_color_horizon = value
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/sunset_color_horizon\",sunset_color_horizon)

func set_day_color_sky(value):
	day_color_sky = value
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/day_color_sky\",day_color_sky)
	
func set_day_color_horizon(value):
	day_color_horizon = value
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/sunset_color_sky\",day_color_horizon)
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/day_color_horizon\",day_color_horizon)

func set_moon_color(value):
	moon_color = value
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/moon_color\",moon_color)

func set_clouds_color(value):
	clouds_color = value
	if is_inside_tree():
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/clouds_color\",clouds_color)

func _process(delta):
	iTime += delta
	var lighting_strength = clamp(sin(iTime*20.0),0.0,1.0)
	lighting_pos = lighting_pos.normalized()
	sun.light_color = sun_light
	sun.light_energy = lighting_strength*2
	call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/LIGHTTING_POS\",lighting_pos)
	call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/LIGHTING_STRENGTH\",Vector3(lighting_strength,lighting_strength,lighting_strength))
	sun.look_at_from_position(lighting_pos,Vector3.ZERO,Vector3.UP);

func set_lighting_strike(on: bool):
	if on:
		_set_god_rays(false)
		set_process(true)
	else:
		_set_god_rays(true)
		set_process(false)
		iTime = 0.0
		if sky_tex:
			call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/LIGHTING_STRENGTH\",Vector3(0.0,0.0,0.0))
		set_time()

func thunder():
	var thunder_sound:AudioStreamPlayer = $thunder;
	if thunder_sound.is_playing():
		#thunder_sound.stop()
		return
	thunder_sound.play()
	yield(get_tree().create_timer(0.3),\"timeout\");
	set_lighting_strike(true)
	yield(get_tree().create_timer(0.8),\"timeout\");
	set_lighting_strike(false)

func _set_exposure(value: float):
	if god_rays:
		god_rays.set_exposure(value)

func _set_attenuation(value: float):
	if god_rays:
		god_rays.set_attenuation(value)
	
func _set_light_size(value: float):
	if god_rays:
		god_rays.set_light_size(value)

func _set_god_rays(on: bool):
	if not god_rays:
		return
	if on:
		if !god_rays.is_inside_tree():
			add_child(god_rays)
		god_rays.light = sun
		god_rays.set_clouds(clouds_view.get_texture())
	else:
		remove_child(god_rays)
"

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = ExtResource( 3 )
shader_param/WIND = Vector3( -0.1, 0, 0 )
shader_param/SUN_POS = null
shader_param/SIZE = 1.954
shader_param/SOFTNESS = 0.575
shader_param/COVERAGE = 0.5
shader_param/HEIGHT = 0.35
shader_param/THICKNESS = 15.0
shader_param/ABSORPTION = 1.25
shader_param/STEPS = 20
shader_param/Noise = ExtResource( 4 )

[sub_resource type="ImageTexture" id=3]
flags = 0
lossy_quality = 1.0
flags = 0
size = Vector2( 1024, 1024 )

[sub_resource type="ViewportTexture" id=4]
viewport_path = NodePath("clouds_viewport")

[sub_resource type="ShaderMaterial" id=5]
resource_local_to_scene = true
shader = ExtResource( 2 )
shader_param/DAY_TIME = Vector2( 3, 0.378 )
shader_param/SUN_POS = Vector3( 0.31995, 0.947434, 0 )
shader_param/MOON_POS = Vector3( -0.226239, -0.947434, 0.226239 )
shader_param/MOON_PHASE = -0.2
shader_param/LIGHTING_STRENGTH = Vector3( 0, 0, 0 )
shader_param/LIGHTTING_POS = null
shader_param/night_color_sky = Color( 0, 0, 0, 1 )
shader_param/sunset_color_sky = Color( 0.239216, 0.529412, 1, 1 )
shader_param/sunset_color_horizon = Color( 1, 0.33, 0.12, 1 )
shader_param/day_color_sky = Color( 0.07, 0.18, 0.5, 1 )
shader_param/day_color_horizon = Color( 0.239216, 0.529412, 1, 1 )
shader_param/sun_color = Color( 1, 1, 1, 1 )
shader_param/moon_color = Color( 0.94902, 0.54902, 0.109804, 1 )
shader_param/moon_radius = 0.2
shader_param/Noise = ExtResource( 4 )
shader_param/cloud_env_texture = SubResource( 4 )

[sub_resource type="ImageTexture" id=6]
flags = 0
lossy_quality = 1.0
flags = 0
size = Vector2( 2048, 2048 )

[node name="Sky_with_simple_colors" type="Spatial"]
script = SubResource( 1 )
day_color_horizon = Color( 0.239216, 0.529412, 1, 1 )
moon_color = Color( 0.94902, 0.54902, 0.109804, 1 )
moon_radius = 0.2
clouds_size = 2.7422
clouds_dens = 0.0
clouds_height = 0.35
quality = 0.2
hours = 12
minutes = 46
seconds = 48
time_of_day = 0.5325
night_level_light = 0.05

[node name="Env" type="WorldEnvironment" parent="."]
environment = ExtResource( 1 )

[node name="Sun_Moon" type="DirectionalLight" parent="."]
transform = Transform( -4.37114e-08, 0.947436, -0.31995, 0, 0.319951, 0.947433, 1, 4.14137e-08, -1.39855e-08, -0.31995, 0.947434, 0 )
light_energy = 0.75
shadow_enabled = true
shadow_color = Color( 0.3, 0.3, 0.3, 1 )
directional_shadow_depth_range = 1

[node name="clouds_viewport" type="Viewport" parent="."]
size = Vector2( 1024, 1024 )
transparent_bg = true
render_target_update_mode = 3

[node name="clouds_texture" type="Sprite" parent="clouds_viewport"]
material = SubResource( 2 )
texture = SubResource( 3 )
centered = false

[node name="sky_viewport" type="Viewport" parent="."]
size = Vector2( 2048, 2048 )
render_target_update_mode = 3

[node name="sky_texture" type="Sprite" parent="sky_viewport"]
material = SubResource( 5 )
texture = SubResource( 6 )
centered = false

[node name="GodRays" type="Spatial" parent="."]
script = ExtResource( 5 )
exposure = 1.0
attenuation = 3.0
light_size = 0.3

[node name="thunder" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 6 )
